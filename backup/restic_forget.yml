---
- name: Restic Forget/Prune for all remotes
  hosts: all
  vars_files:
    - "{{ vars_file | default('vars/config.yml') }}"
  tasks:
    - name: Debug restic forget/prune command and environment for each remote
      ansible.builtin.debug:
        msg:
          - "Remote: {{ remote.name }}"
          - "Command: restic -r {{ repo }} forget
            {% if restic_forget.keep_last is defined %}--keep-last {{ restic_forget.keep_last }}{% endif %}
            {% if restic_forget.keep_daily is defined %}--keep-daily {{ restic_forget.keep_daily }}{% endif %}
            {% if restic_forget.keep_weekly is defined %}--keep-weekly {{ restic_forget.keep_weekly }}{% endif %}
            {% if restic_forget.keep_monthly is defined %}--keep-monthly {{ restic_forget.keep_monthly }}{% endif %}
            {% if restic_forget.keep_within_daily is defined %}--keep-within-daily {{ restic_forget.keep_within_daily }}{% endif %}
            {% if restic_forget.keep_within_weekly is defined %}--keep-within-weekly {{ restic_forget.keep_within_weekly }}{% endif %}
            {% if restic_forget.keep_within_monthly is defined %}--keep-within-monthly {{ restic_forget.keep_within_monthly }}{% endif %}
            {% if restic_forget.prune | default(false) %}--prune{% endif %}
            {% if dry_run | default(false) %}--dry-run{% endif %}
            --host {{ inventory_hostname }}"
          - "Environment: {{ remote.env | combine(global_restic_env) }}"
      loop: "{{ rclone_remotes }}"
      loop_control:
        loop_var: remote
        label: "{{ remote.name }}"
      vars:
        repo: "rclone:{{ remote.name }}:backup-restic/{{ inventory_hostname | lower }}"
      when: (debug | default(false)) or (lookup('env', 'DEBUG') | lower in ['1', 'true', 'yes'])

    - name: Run restic forget/prune for each remote
      ansible.builtin.command:
        cmd: >
          restic -r "{{ repo }}" forget
          {% if restic_forget.keep_last is defined %}--keep-last {{ restic_forget.keep_last }}{% endif %}
          {% if restic_forget.keep_daily is defined %}--keep-daily {{ restic_forget.keep_daily }}{% endif %}
          {% if restic_forget.keep_weekly is defined %}--keep-weekly {{ restic_forget.keep_weekly }}{% endif %}
          {% if restic_forget.keep_monthly is defined %}--keep-monthly {{ restic_forget.keep_monthly }}{% endif %}
          {% if restic_forget.keep_within_daily is defined %}--keep-within-daily {{ restic_forget.keep_within_daily }}{% endif %}
          {% if restic_forget.keep_within_weekly is defined %}--keep-within-weekly {{ restic_forget.keep_within_weekly }}{% endif %}
          {% if restic_forget.keep_within_monthly is defined %}--keep-within-monthly {{ restic_forget.keep_within_monthly }}{% endif %}
          {% if restic_forget.prune | default(false) %}--prune{% endif %}
          {% if dry_run | default(false) %}--dry-run{% endif %}
          --host "{{ inventory_hostname }}"
      changed_when: false
      environment: "{{ remote.env | combine(global_restic_env) }}"
      register: restic_forget_result
      loop: "{{ rclone_remotes }}"
      loop_control:
        loop_var: remote
        label: "{{ remote.name }}"
      vars:
        repo: "rclone:{{ remote.name }}:backup-restic/{{ inventory_hostname | lower }}"
      failed_when: restic_forget_result.rc != 0

    - name: Show restic forget/prune output for each remote
      ansible.builtin.debug:
        msg:
          - "Remote: {{ item.remote.name }}"
          - "{{ item.stdout_lines }}"
      loop: "{{ restic_forget_result.results }}"
      when: item.stdout_lines is defined
